---
- name: "Go-Lang | Install dependencies"
  apt:
    pkg:
      - 'curl'
      - 'gcc'
      - 'git'
      - 'findutils'
      - 'make'
      - 'rsync'
      - 'tar'
    state: present
  register: apt_result
  become: true
  until: apt_result is success
  retries: 1
  delay: 2

- name: "Go-Lang | Define GOARCH"
  set_fact:
    goarch: "amd64"
  when: goarch is not defined

- name: "Go-Lang | Define go_version"
  set_fact:
    go_version: 1.19.4
  when: go_version is not defined

- name: "Go-Lang | Define go_file"
  ansible.builtin.set_fact:
    go_file: "go{{ go_version }}.{{ goos }}-{{ goarch }}"

- name: Ensure clean download destination
  ansible.builtin.file:
    path: "/tmp/go{{ go_version }}.{{ goos }}-{{ goarch }}.tar.gz"
    state: absent
  diff: false
  become: true

- name: Download GitHub Release
  ansible.builtin.get_url:
    url: "https://golang.org/dl/{{ go_file }}.tar.gz"
    dest: /tmp/
    mode: 0644
    force: true
  notify:
    - Cleanup go downloaded tar

- name: Ensure clean extraction destination
  ansible.builtin.file:
    path: "/tmp/go"
    state: absent
  diff: false
  become: true

- name: Extract go tar file
  ansible.builtin.unarchive:
    src: "/tmp/{{ go_file }}.tar.gz"
    dest: /tmp

- name: Remove any current Go installations
  ansible.builtin.file:
    path: /usr/local/go
    state: absent
  diff: false
  become: true

- name: Install Go
  ansible.builtin.copy:
    remote_src: true
    src: /tmp/go
    dest: /usr/local/go
    mode: 0644
    force: true
  become: true
  notify:
    - Remove extracted go directory
