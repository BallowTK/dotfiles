---
- name: "Go-Lang | Install dependencies"
  apt:
    pkg:
      - 'curl'
      - 'gcc'
      - 'git'
      - 'findutils'
      - 'make'
      - 'rsync'
      - 'tar'
      - 'jq'
    state: present
  register: apt_result
  become: true
  until: apt_result is success
  retries: 1
  delay: 2

- name: "Go-Lang | Define GOARCH"
  set_fact:
    goarch: "amd64"
  when: goarch is not defined

- name: "Go-Lang | Getting version information"
  command: "/usr/local/go/bin/go version"
  register: current_go_version
  changed_when: false
  failed_when: false

- name: "Go-Lang | Download Latest Version JSON"
  ansible.builtin.uri:
    url: https://go.dev/dl/?mode=json
  register: go_latest_version_json
  changed_when: false

- name: Registering go Latest Version
  ansible.builtin.set_fact:
    go_latest_version: "go version {{ go_latest_version_json.json[0].version }} {{ goos }}/{{ goarch }}"

- name: "Go-Lang | Define go_file"
  ansible.builtin.set_fact:
    go_file: "go{{ go_latest_version }}.{{ goos }}-{{ goarch }}"

- name: Install
  block:
    - name: Ensure clean download destination
      ansible.builtin.file:
        path: "/tmp/go{{ go_version }}.{{ goos }}-{{ goarch }}.tar.gz"
        state: absent
      become: true

    - name: Download GitHub Release
      ansible.builtin.get_url:
        url: "https://golang.org/dl/{{ go_file }}.tar.gz"
        dest: /tmp/
        mode: 0644
        force: true
      notify:
        - Cleanup go downloaded tar

    - name: Ensure clean extraction destination
      ansible.builtin.file:
        path: "/tmp/go"
        state: absent
      become: true

    - name: Extract go tar file
      ansible.builtin.unarchive:
        src: "/tmp/{{ go_file }}.tar.gz"
        dest: /tmp

    - name: Remove any current Go installations
      ansible.builtin.file:
        path: /usr/local/go
        state: absent
      become: true

    - name: Install Go
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/go
        dest: /usr/local/
        owner: "{{ host_user }}"
        group: "{{ host_user }}"
        force: true
      become: true
      notify:
        - Remove extracted go directory

  when: expected_go_version_output|string not in current_go_version.stdout|default('')
